
dot_product(V1,V2) :  ARRAY_OF FLOAT[2])

VAR
   i,j: INTEGER;
    ps : FLOAT := 0;
i,j: INTEGER;
BEGIN
    FOR i FROM 0 TO n-1 STEP step  DO
    FOR j FROM 0 TO v2.length STEP 1  DO
    IF (i=j) THEN
    ps := ps + V1[i] * V2[j];
  end if
    END_FOR
    RETURN ps ;
END

ALGORITHM Dotproduct (v1,v2 : ARRAY_OF FLOAT[2])
VAR
    i,j: INTEGER;
    PS : FLOAT;

BEGIN

    read(j);

    FOR i FROM 0 TO n-1 STEP step  DO
   FOR j FROM 0 TO v2.length STEP 1  DO
     IF (i=j) THEN
    PS := PS + ( v1[i] * v2[j] );

    read (v1);

    read (v2);
    END_FOR

    dotprod := dot_product (v1,v2);
    IF (dotprod=0) THEN
        write("The two vectors are orthogonal");
    ELSE
        write("The two vectors are not orthogonal");
    END_IF
END
ALGORITHM Sort
VAR
    i,j,current : INTEGER;
BEGIN
    FOR i FROM 1 TO arr.length-1 
    DO
        key := arr [i];
        j := i-1;
        WHILE (key < array[j] && j >= 0) DO
        DO
            arr[j+1] := arr[j];
            i := j-1;
            --j;
        END_WHILE
        arr[j+1] = key;
    END_FOR


ALGORITHM 
BEGIN
// appelle de procedures 
    n=saisie(n)
    remplir(t,n)
    tri(t,n)
END
